name: Build precompiled NIFs

on:
  push:
    branches:
      - "main"
    tags:
      - "*"

jobs:
  build_release:
    name: NIF ${{ matrix.nif }} - ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        nif: ["2.16", "2.17"]
        job:
          - { target: aarch64-apple-darwin, os: macos-13 }
          - { target: x86_64-apple-darwin, os: macos-13 }
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-22.04 }
          - {
              target: aarch64-unknown-linux-musl,
              os: ubuntu-22.04,
              use-cross: true,
            }
          - {
              target: x86_64-unknown-linux-musl,
              os: ubuntu-22.04,
              use-cross: true,
            }
          - { target: x86_64-pc-windows-msvc, os: windows-2022 }

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Extract project version
        shell: bash
        run: |
          # Get the project version from mix.exs
          echo "PROJECT_VERSION=$(sed -n 's/^  @version "\(.*\)"/\1/p' mix.exs | head -n1)" >> $GITHUB_ENV

      # Cache LLVM/Clang installation
      - name: Cache LLVM and Clang
        uses: actions/cache@v4
        id: cache-llvm
        with:
          path: |
            C:/Program Files/LLVM
            /usr/local/Cellar/llvm@15
            /usr/lib/llvm-15
            ~/.cache/llvm
          key: llvm-15-${{ matrix.job.target }}-${{ matrix.job.os }}
          restore-keys: |
            llvm-15-${{ matrix.job.target }}-
            llvm-15-

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v2.0.3
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        with:
          version: "15"
          target: ${{ matrix.job.target }}

      # Cache Rust toolchain
      - name: Cache Rust toolchain
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
          key: rust-toolchain-${{ matrix.job.target }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            rust-toolchain-${{ matrix.job.target }}-
            rust-toolchain-

      - name: Install minimal stable with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: ${{ matrix.job.target }}

      # Cache Cargo registry and dependencies
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: cargo-registry-${{ matrix.job.target }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          restore-keys: |
            cargo-registry-${{ matrix.job.target }}-
            cargo-registry-

      # Cache build artifacts (target directory)
      - name: Cache Cargo build
        uses: actions/cache@v4
        with:
          path: |
            native/rocker/target
          key: cargo-build-${{ matrix.job.target }}-${{ matrix.nif }}-${{ hashFiles('**/Cargo.lock', 'native/rocker/src/**') }}
          restore-keys: |
            cargo-build-${{ matrix.job.target }}-${{ matrix.nif }}-
            cargo-build-${{ matrix.job.target }}-

      # Cross compilation cache (if using cross)
      - name: Cache Cross docker images
        uses: actions/cache@v4
        if: matrix.job.use-cross
        with:
          path: ~/.cache/cross
          key: cross-${{ matrix.job.target }}
          restore-keys: cross-

      - name: Build the project
        id: build-crate
        uses: philss/rustler-precompiled-action@v1.0.1
        with:
          project-name: rocker
          project-version: ${{ env.PROJECT_VERSION }}
          target: ${{ matrix.job.target }}
          nif-version: ${{ matrix.nif }}
          use-cross: ${{ matrix.job.use-cross }}
          project-dir: "native/rocker"

      - name: Artifact upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build-crate.outputs.file-name }}
          path: ${{ steps.build-crate.outputs.file-path }}

      - name: Publish archives and packages
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ steps.build-crate.outputs.file-path }}
        if: startsWith(github.ref, 'refs/tags/')